/*  mock_websocket.js, version 0.0.2
*  (c) 2011 Ismael Celis (@ismasan)
*
*  Released under MIT license.
*/
var Sockete=function(){function e(){return window["console"]&&Sockete.settings.log}var t=window["WebSocket"];return{mock:function(){window["WebSocket"]=Sockete.Client},restore:function(){window["WebSocket"]=t},logEvent:function(t){if(!e())return false;console.log(t,"[Sockete.Response] - client "+t.currentTarget.__sockete_id+" | "+t.type+" : "+t.data)},logRound:function(t,n,r){if(!e())return false;console.log("[Sockete] client "+n.client.__sockete_id+":"+n.toString()+" => server "+t.URL+":"+r.toString())},settings:{connection_delay:10,log:true}}}();(function(){Sockete.Request=function(e,t,n){this.client=e;this.request_type=t;this.message=n};Sockete.Request.prototype={toString:function(){return"[Sockete.Request] "+this.request_type+" : "+this.message}}})();(function(){Sockete.Response=function(e,t,n){function r(){return t=="open"?"success":"fail"}this.type=t;this.data=n;this.currentTarget=e;this.toString=function(){return"["+r()+"] "+n}}})();(function(){Sockete.clients=[];Sockete.Client=function(e){function n(e){t.readyState=e}function r(e){switch(e.type){case"open":n(1);t["onopen"]({eventPhase:1,timeStamp:(new Date).getTime()});return;case"close":n(3);t["onclose"]({code:1e3,eventPhase:3,reason:"",timeStamp:(new Date).getTime()});return}t["on"+e.type](e)}function i(){t.__server=Sockete.Server.find(e);if(!t.__server)throw"[Sockete.Client#connect] No server configured for URL "+e;var n=new Sockete.Request(t,"open");t.__server.request(n,r)}this.onmessage=function(e){Sockete.logEvent(e)};this.onclose=function(e){Sockete.logEvent(e)};this.onopen=function(e){Sockete.logEvent(e)};var e=e;this.__server=null;this.readyState=0;var t=this;this.close=function(){n(2);var e=new Sockete.Request(t,"close");t.__server.request(e,r)};this.send=function(e){if(this.readyState!=1)return false;var n=new Sockete.Request(t,"message",e);t.__server.request(n,r);return true};setTimeout(i,Sockete.settings.connection_delay);Sockete.clients.push(this);this.__sockete_id=Sockete.clients.length}})();(function(){function e(e){if(e.__response_type)throw"Response for "+e.message+" has already been set to "+e.__response_type+" with "+e.__response_message}Sockete.Responder=function(e,t){this.event_type=e;this.message=t};Sockete.Responder.prototype={__response_type:null,__response_message:null,respond:function(t){e(this);this.__response_type="message";this.__response_message=t;return this},fail:function(t){e(this);this.__response_type="close";this.__response_message=t;return this},match:function(e){return e.request_type==this.event_type},response:function(e){var t;if(typeof this.__response_message==="function"){t=this.__response_message(e.message)}else{t=this.__response_message}return new Sockete.Response(e.client,this.__response_type,t)}}})();(function(){Sockete.Server=function(e){this.url=this.URL=e;this.responders=[]};Sockete.Server.prototype={addResponder:function(e,t){var n=new Sockete.Responder(e,t);this.responders.push(n);return n},onmessage:function(e){return this.addResponder("message",e)},onconnect:function(){return this.addResponder("open","")},request:function(e,t){var n;switch(e.request_type){case"open":n=new Sockete.Response(e.client,"open");Sockete.logRound(this,e,n);t(n);break;case"close":n=new Sockete.Response(e.client,"close");Sockete.logRound(this,e,n);t(n);break}if(responder=this.findResponder(e)){n=responder.response(e);Sockete.logRound(this,e,n);t(n)}else if(e.request_type!=="open"&&e.request_type!=="close"){n=new Sockete.Response(e.client,"close","[Sockete.Server] No response configured for "+e.toString());Sockete.logRound(this,e,n);t(n)}},match:function(e){return e==this.url},findResponder:function(e){for(var t=0,n=this.responders.length;t<n;t++){if(this.responders[t].match(e))return this.responders[t]}return null}};Sockete.servers=[];Sockete.Server.configure=function(e,t){var n=new Sockete.Server(e);t.apply(n,[]);Sockete.servers.push(n);return n};Sockete.Server.find=function(e){for(var t=0,n=Sockete.servers.length;t<n;t++){if(Sockete.servers[t].match(e))return Sockete.servers[t]}return null}})();
